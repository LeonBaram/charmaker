// data
import descriptions from './descriptions';

// the maximum level a D&D character can be
const MAX_LEVEL = 20;

/** class representing a simplified D&D 5e character */
class Character {

    // a data structure storing this object's potential error messages
    errors = {
        MAX_LEVEL:
            `ERROR. Max Character level is 20.
Level set to:`
    };

    // a string to hold the id generated by firebase's push() method
    firebaseID = '';

    /**
     * create a Character
     * 
     * NOTE:
     * rather than taking params directly, this constructor takes a "compressedCharacter" object:
     * 
     * {
     *   name: string,
     *   level: number,
     *   dndclass: string,
     *   race: string,
     *   background: string,
     * }
     * 
     * This cleans up the constructor call syntax (labelling each arg and 
     * allowing them to fall in whatever order), and provides a JSON-compatible 
     * Character instance representation, mainly for the benefit of Firebase's 
     * Real-Time Database (which stores objects in JSON).
     * 
     * @param {object} compressedCharacter an object containing the specified properties
     *  @property {string} name a name for this character
     *  @property {number} level a starting level (no more than MAX_LEVEL)
     *  @property {string} dndclass a D&D class (e.g. "wizard")
     *  @property {string} race a D&D race (e.g. "halfling")
     *  @property {string} background a D&D background (e.g. "soldier")
     */
    constructor({ name, dndclass, race, background, level }) {

        if (!level) {
            level = 1;
        }

        this.name = name;
        this.race = {
            name: race,
            desc: descriptions.race[race]
        };
        this.dndclass = {
            name: dndclass,
            desc: descriptions.dndclass[dndclass],
            level: level
        };
        this.background = {
            name: background,
            desc: descriptions.background[background]
        }

        if (level > MAX_LEVEL) {
            this.dndclass.level = 1;
            console.log(
                this.errors.MAX_LEVEL,
                this.dndclass.level
            );
        }
    }

    /**
     * getter method for this character's level
     */
    get level() {
        return this.dndclass.level;
    }

    /**
     * setter method for this character's level
     * @param {number} level an integer between 1 and MAX_LEVEL (inclusive)
     * @returns true if the assignment went through, false otherwise
     */
    set level(level) {

        if (Number.isInteger(level) &&
            level >= 1 && level <= MAX_LEVEL) {
            this.dndclass.level = level;
        } else {
            console.log(
                this.errors.MAX_LEVEL,
                this.dndclass.level
            );
        }
        return this.dndclass.level === level;
    }

    /**
     * @function desc
     * get a description of this part of the character
     * @param {string} attribute the key of one of this object's fields
     * @returns {string} the "desc" property of the specified field
     */
    desc(attribute) {
        return this[attribute].desc;
    }

    /**
     * @function toJSON
     * converts a Character instance into a JSON-compatible compressedCharacter 
     * representation
     * @returns {object} a compressedCharacter representation of this Character 
     * object
     */
    toJSON() {
        return {
            name: this.name,
            race: this.race.name,
            dndclass: this.dndclass.name,
            background: this.background.name,
            level: this.dndclass.level,
        };
    }
}

export default Character;
export { MAX_LEVEL };